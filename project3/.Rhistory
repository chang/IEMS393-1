ggplot(eval) +
geom_line(aes(x=iter, y=train_rmse_mean), size=1, color='darkgray', alpha=1) +
geom_line(aes(x=iter, y=test_rmse_mean), size=1, color='blue', alpha=.6) +
geom_point(data=eval[which(eval$test_rmse_mean == min(eval$test_rmse_mean)),],
aes(x=iter, y=test_rmse_mean), size=3, color='red', alpha=.6) +
ggtitle("XGBOOST train and test RMSE") +
ylab("RMSE") + xlab("Iteration #")
ggplot(eval) +
geom_line(aes(x=iter, y=train_rmse_mean), size=1, color='darkgray', alpha=1) +
geom_line(aes(x=iter, y=test_rmse_mean), size=1, color='blue', alpha=.6) +
geom_point(data=eval[which(eval$test_rmse_mean == min(eval$test_rmse_mean)),],
aes(x=iter, y=test_rmse_mean), size=3, color='red', alpha=.6) +
ggtitle("XGBOOST Cross Validation") +
ylab("RMSE") + xlab("Iteration #")
t <- lm(formula, dat_lm[c(-17),])
summary(t)
plot(t)
t
stat_qq(t)
gg_qqplot <- function (vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = vec)
ggplot(d, aes(sample = resids)) + stat_qq() + geom_abline(slope = slope, intercept = int)
}
gg_qqplot(t$residuals)
t <- lm(formula, dat_lm[c(-17),])
summary(t)
plot(t)
summary(t)
gg_qqplot <- function (vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = vec)
ggplot(d, aes(sample = resids)) +
stat_qq(size=1.2, alpha=.5) +
geom_abline(slope = slope, intercept = int)
}
gg_qqplot(t$residuals)
plot(t)
plot(t)
t <- lm(formula, dat_lm[c(-17, -21),])
summary(t)
t
t
summary(t)
plot(t)
gg_qqplot(t$residuals)
gg_qqplot <- function (vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = vec)
ggplot(d, aes(sample = resids)) +
stat_qq(size=2, alpha=.5) +
geom_abline(slope = slope, intercept = int) +
ggtitle("Q-Q Plot")
}
gg_qqplot(t$residuals)
t_resid
t_resid <- data.frame(residuals=t$residuals, fitted_values=t$fitted.values)
t_resid
ggplot(t_resid) + geom_point(aes(x=fitted.values, y=residuals, color=abs(residuals)))
ggplot(t_resid) + geom_point(aes(x=fitted.values, y=residuals)
)
ggplot(t_resid) + geom_point(aes(x=fitted.values, y=residuals))
names(t_resid)
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals))
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals), size=2, alpha=.5)
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.5)
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_color_hue()
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_alpha_discrete()
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_color_brewer()
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_colour_gradient()
ggplot(t_resid %>% filter(residuals > -500)) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_colour_gradient()
ggplot(t_resid %>% filter(residuals > -500)) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_colour_gradient() + abline(a=0)
ggplot(t_resid %>% filter(residuals > -500)) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_colour_gradient() + abline(0)
ggplot(t_resid %>% filter(residuals > -500)) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_colour_gradient() + geom_abline(0,0)
ggplot(t_resid %>% filter(residuals > -500)) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_colour_gradient() + geom_abline(slope=0,intercept=0)
ggplot(t_resid %>% filter(residuals > -500)) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=2, alpha=.7) + scale_colour_gradient() + geom_abline(slope=0,intercept=0) + ggtitle("Residuals Plot")
require(dplyr)
require(ggplot2)
require(magrittr)
require(dplyr)
require(ggplot2)
require(magrittr)
dat_fit <- lm(price ~ ., dat)
require(dplyr)
require(ggplot2)
require(magrittr)
dat <- read.csv("kc_house_data.csv")
str(dat)
dat <- dat %>%
select(-id, -date, -sqft_basement) %>%
mutate(zipcode = as.factor(zipcode))
ggplot(dat %>% filter(price < 4000000)) +
geom_histogram(aes(x = price, fill = ..count..), binwidth = 15000) +
scale_x_continuous(breaks = seq(0, 4000000, 500000), labels=scales::dollar) +
theme(axis.text.x = element_text(angle = 90, size = 8)) +
ggtitle("Distribution of housing prices")
dat_fit <- lm(price ~ ., dat)
dat_fit_summary <- summary(dat_fit)
dat_fit_summary$r.squared  # R^2
sum(sqrt(dat_fit_summary$residuals ^ 2)) / nrow(dat)  # RMSE
plot(dat_fit, 1)
plot(dat_fit, 2)
dat_fit_log <- lm(log(price) ~ ., dat)
plot(dat_fit_log, 1)
plot(dat_fit_log, 2)
dat_fit_log <- lm(log(price) ~ ., dat[-12776,])
dat_fit_log <- lm(log(price) ~ ., dat[-12776,])
plot(dat_fit_log, 1)
plot(dat_fit_log, 1)
plot(dat_fit_log, 2)
dat_fit_log <- lm(log(price) ~ ., dat[-12778,])
dat_fit_log <- lm(log(price) ~ ., dat[-12778,])
plot(dat_fit_log, 1)
plot(dat_fit_log, 1)
plot(dat_fit_log, 2)
dat_fit_summary
dat_resid <- data.frame(residuals=dat_fit$residuals, fitted_values=dat_fit$fitted.values)
ggplot(t_resid) + geom_point(aes(x=fitted.values, y=residuals, color=abs(residuals)))
dat_resid <- data.frame(residuals=dat_fit$residuals, fitted_values=dat_fit$fitted_values)
dat_resid <- data.frame(residuals=dat_fit$residuals, fitted_values=dat_fit$fitted.values)
ggplot(t_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)))
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)))
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot")
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="blue", high="red")
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="skyblue", high="chartreuse")
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse")
?scale_color_brewer
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse", type='div')
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse", type=div)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse", type='qual')
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse", values = c(.2, .8))
?scale_color_gradient
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse", values = c(.2, .8))
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.5) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse")
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse")
?xlim
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + xlim(-max(dat_resid$residuals)*1.1, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*1.1, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*.7, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*.7, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), size=1,alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*.7, max(dat_resid$residuals)*1.1)
gg_qqplot(dat_resid$residuals)
gg_qqplot <- function (vec) # argument: vector of numbers
{
# following four lines from base R's qqline()
y <- quantile(vec[!is.na(vec)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
d <- data.frame(resids = vec)
ggplot(d, aes(sample = resids)) +
stat_qq(size=2, alpha=.4) +
geom_abline(slope = slope, intercept = int) +
ggtitle("Q-Q Plot")
}
gg_qqplot(dat_resid$residuals)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*.7, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*.7, max(dat_resid$residuals)*1.1)
dat_resid <- data.frame(residuals=dat_fit_log$residuals, fitted_values=dat_fit_log$fitted.values)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*.7, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*.7, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*1.1, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.2) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*1.1, max(dat_resid$residuals)*1.1)
ggplot(dat_resid) + geom_point(aes(x=fitted_values, y=residuals, color=abs(residuals)), alpha=.4) + ggtitle("Residuals Plot") + scale_color_gradient(low="dodgerblue", high="chartreuse") + ylim(-max(dat_resid$residuals)*1.1, max(dat_resid$residuals)*1.1)
gg_qqplot(dat_resid$residuals)
summary(dat_fit)
?reorder()
dat <- dat[c(setdiff(names(dat), 'zipcode'), 'zipcode)]
dat_fit <- lm(price ~ ., dat)
```{r, fig.width = 5, fig.height = 3, eval=F}
a
:
;
''
''
dat <- dat[c(setdiff(names(dat), 'zipcode'), 'zipcode')]
str(dat)
dat_fit <- lm(price ~ ., dat)
dat_fit <- lm(price ~ (lat + long)^2+ zipcode, dat)
summary(dat_fit)
dat_fit <- lm(price ~ I((lat + long)^2)+ zipcode, dat)
dat_fit <- lm(price ~ I((lat + long)^2)+ zipcode, dat)
summary(dat_fit)
dat_fit <- lm(price ~ (lat + long)^2+ zipcode, dat)
summary(dat_fit)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + I(day_of_month^2) + I(year^2) + month*day_of_month,
select(dat_lm, -morning_kickoff))
summary(fit_dat_lm)
fit_dat_lm$residuals
fit_dat_lm$fitted.values
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + I(day_of_month^2) + month*day_of_month,
select(dat_lm, -morning_kickoff))
summary(fit_dat_lm)
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff))
summary(fit_dat_lm)
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + I(day_of_month^2) + month*day_of_month,
select(dat_lm, -morning_kickoff, -year))
summary(fit_dat_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + I(day_of_month^2) + month*day_of_month,
select(dat_lm, -morning_kickoff))
summary(fit_dat_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + I(day_of_month^2) + month*day_of_month,
select(dat_lm, -morning_kickoff))
summary(fit_dat_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + I(day_of_month^2) + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(-17))
summary(fit_dat_lm)
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(-17))
summary(fit_dat_lm)
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
preds <-
fit_dat_lm$fitted.values %>%
data.frame()
preds <- rename(preds, predictions = .)
ggplot(preds) +
geom_histogram(aes(x=predictions, fill=..count..), bins = 20) +
ggtitle("Distribution of predictions")
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(-17, -21))
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(c(-17, -21))
summary(fit_dat_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(c(-17, -21)))
summary(fit_dat_lm)
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(c(-17, -21)))
summary(fit_dat_lm)
preds <-
fit_dat_lm$fitted.values %>%
data.frame()
preds <- rename(preds, predictions = .)
ggplot(preds) +
geom_histogram(aes(x=predictions, fill=..count..), bins = 20) +
ggtitle("Distribution of predictions")
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(c(-17)))
summary(fit_dat_lm)
preds <-
fit_dat_lm$fitted.values %>%
data.frame()
preds <- rename(preds, predictions = .)
ggplot(preds) +
geom_histogram(aes(x=predictions, fill=..count..), bins = 20) +
ggtitle("Distribution of predictions")
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(c(-17, -21)))
summary(fit_dat_lm)
require(dplyr)
require(ggplot2)
# prepare data
source("featurize_data.R")
dat_lm <- filter(dat, !(programs_ordered == programs_sold)) %>%
select(-programs_ordered, -time_kickoff, -percent_male) %>%
filter(coach_pokey != 1) %>%  # take out old coach game
select(-coach_pokey) %>%
filter(!(month == "August" & day_of_month == 30 & opponent == "Nebraska")) %>%
select(-opponent) %>%
mutate(year = as.integer(as.character(year))) %>%
filter(!month %in% c("August", "December"))
dat_lm$month <- droplevels(dat_lm$month)
#
fit_dat_lm <- lm(programs_sold ~ . + month*day_of_month,
select(dat_lm, -morning_kickoff) %>% slice(c(-17, -21)))
summary(fit_dat_lm)
preds <-
fit_dat_lm$fitted.values %>%
data.frame()
preds <- rename(preds, predictions = .)
ggplot(preds) +
geom_histogram(aes(x=predictions, fill=..count..), bins = 20) +
ggtitle("Distribution of predictions")
source("create_test_data.R")
schedule2017_lm
predict(fit_dat_lm, schedule2017_lm)
